{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EasySSD1306","text":"<p>A library for creating graphical interfaces on SSD1306 OLED displays with ESP32 and ESP8266.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Pre-built components</li> <li>Text and image support</li> <li>Menu navigation</li> <li>Loading animations</li> <li>Alert system</li> </ul>"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<ul> <li>ESP32</li> <li>ESP8266</li> <li>Arduino (in development)</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#platformio","title":"PlatformIO","text":"<p>Add to your <code>platformio.ini</code>:</p> <pre><code>lib_deps =\n    digitalfen/EasySSD1306\n</code></pre>"},{"location":"#arduino-ide","title":"Arduino IDE","text":"<ol> <li>Download the ZIP file</li> <li>Go to Sketch &gt; Include Library &gt; Add .ZIP Library</li> <li>Select the downloaded ZIP file</li> </ol>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    TextView* text = new TextView(\"Hello!\");\n    display.addComponent(text);\n    display.begin();\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Quick Start Guide</li> <li>API Reference</li> <li>Examples</li> <li>Components Overview</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! See the contributing guide.</p>"},{"location":"#license","title":"License","text":"<p>MIT License - see LICENSE file for details.</p>"},{"location":"#support","title":"Support","text":"<ul> <li>Open an issue on GitHub</li> <li>Check the documentation</li> <li>Review the examples</li> </ul>"},{"location":"api-reference/","title":"API Reference","text":"<p>Detailed information about the EasySSD1306 API.</p>"},{"location":"api-reference/#displaymanager","title":"DisplayManager","text":"<p>The main class for managing the OLED display and its components.</p>"},{"location":"api-reference/#constructor","title":"Constructor","text":"<pre><code>DisplayManager(int width, int height)\n</code></pre>"},{"location":"api-reference/#methods","title":"Methods","text":""},{"location":"api-reference/#display-control","title":"Display Control","text":"<pre><code>void begin()\nvoid update()\nvoid clear()\n</code></pre>"},{"location":"api-reference/#component-management","title":"Component Management","text":"<pre><code>void addComponent(Component* component)\nvoid removeComponent(Component* component)\nvoid removeAllComponents()\n</code></pre>"},{"location":"api-reference/#components","title":"Components","text":""},{"location":"api-reference/#textview","title":"TextView","text":"<p>Component for displaying static text.</p>"},{"location":"api-reference/#constructor_1","title":"Constructor","text":"<pre><code>TextView(const char* text)\n</code></pre>"},{"location":"api-reference/#methods_1","title":"Methods","text":"<pre><code>void setText(const char* text)\nvoid setPosition(int x, int y)\nvoid setStyle(TextStyle style)\nvoid setVisible(bool visible)\n</code></pre>"},{"location":"api-reference/#navigation","title":"Navigation","text":"<p>Component for creating menus and navigation interfaces.</p>"},{"location":"api-reference/#constructor_2","title":"Constructor","text":"<pre><code>Navigation(const char* title)\n</code></pre>"},{"location":"api-reference/#methods_2","title":"Methods","text":"<pre><code>void addItem(const char* label, const char* value)\nvoid removeItem(int index)\nvoid clearItems()\nvoid selectItem(int index)\nvoid nextItem()\nvoid previousItem()\n</code></pre>"},{"location":"api-reference/#loadanimation","title":"LoadAnimation","text":"<p>Component for displaying loading animations.</p>"},{"location":"api-reference/#constructor_3","title":"Constructor","text":"<pre><code>LoadAnimation(const char* text)\n</code></pre>"},{"location":"api-reference/#methods_3","title":"Methods","text":"<pre><code>void start()\nvoid stop()\nvoid setText(const char* text)\nvoid setPosition(int x, int y)\n</code></pre>"},{"location":"api-reference/#alert","title":"Alert","text":"<p>Component for displaying notifications and alerts.</p>"},{"location":"api-reference/#constructor_4","title":"Constructor","text":"<pre><code>Alert(const char* title, const char* message)\n</code></pre>"},{"location":"api-reference/#methods_4","title":"Methods","text":"<pre><code>void show()\nvoid hide()\nvoid dismiss()\nvoid setDuration(unsigned long duration)\n</code></pre>"},{"location":"api-reference/#imageview","title":"ImageView","text":"<p>Component for displaying static images.</p>"},{"location":"api-reference/#constructor_5","title":"Constructor","text":"<pre><code>ImageView(const uint8_t* bitmap, int width, int height)\n</code></pre>"},{"location":"api-reference/#methods_5","title":"Methods","text":"<pre><code>void setImage(const uint8_t* bitmap, int width, int height)\nvoid setPosition(int x, int y)\nvoid setVisible(bool visible)\n</code></pre>"},{"location":"api-reference/#imageanimation","title":"ImageAnimation","text":"<p>Component for displaying animated images.</p>"},{"location":"api-reference/#constructor_6","title":"Constructor","text":"<pre><code>ImageAnimation(const uint8_t* bitmap, int width, int height)\n</code></pre>"},{"location":"api-reference/#methods_6","title":"Methods","text":"<pre><code>void start()\nvoid stop()\nvoid pause()\nvoid resume()\nvoid setSpeed(int speed)\n</code></pre>"},{"location":"api-reference/#textanimation","title":"TextAnimation","text":"<p>Component for displaying animated text.</p>"},{"location":"api-reference/#constructor_7","title":"Constructor","text":"<pre><code>TextAnimation(const char* text)\n</code></pre>"},{"location":"api-reference/#methods_7","title":"Methods","text":"<pre><code>void start()\nvoid stop()\nvoid pause()\nvoid resume()\nvoid setSpeed(int speed)\n</code></pre>"},{"location":"api-reference/#prompt","title":"Prompt","text":"<p>Component for getting user input.</p>"},{"location":"api-reference/#constructor_8","title":"Constructor","text":"<pre><code>Prompt(const char* label, const char* initialValue)\n</code></pre>"},{"location":"api-reference/#methods_8","title":"Methods","text":"<pre><code>void start()\nvoid stop()\nvoid clear()\nvoid setMaxLength(int length)\nvoid setInputType(InputType type)\n</code></pre>"},{"location":"api-reference/#enums","title":"Enums","text":""},{"location":"api-reference/#textstyle","title":"TextStyle","text":"<pre><code>enum TextStyle {\n    NORMAL,\n    BOLD,\n    ITALIC,\n    UNDERLINE\n};\n</code></pre>"},{"location":"api-reference/#inputtype","title":"InputType","text":"<pre><code>enum InputType {\n    TEXT,\n    NUMBER,\n    PASSWORD\n};\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>Examples demonstrating the use of EasySSD1306 components.</p>"},{"location":"examples/#basic-examples","title":"Basic Examples","text":""},{"location":"examples/#simple-text-display","title":"Simple Text Display","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    TextView* text = new TextView(\"Hello World!\");\n    text-&gt;setPosition(0, 0);\n    display.addComponent(text);\n    display.begin();\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"examples/#menu-navigation","title":"Menu Navigation","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n\n    Navigation* menu = new Navigation(\"Main Menu\");\n    menu-&gt;addItem(\"Temperature\", \"25\u00b0C\");\n    menu-&gt;addItem(\"Humidity\", \"60%\");\n    menu-&gt;addItem(\"Settings\", \"\");\n\n    display.addComponent(menu);\n    display.begin();\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"examples/#loading-animation","title":"Loading Animation","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n\n    LoadAnimation* loading = new LoadAnimation(\"Loading...\");\n    loading-&gt;setPosition(0, 0);\n\n    display.addComponent(loading);\n    display.begin();\n\n    loading-&gt;start();\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"examples/#advanced-examples","title":"Advanced Examples","text":""},{"location":"examples/#system-status-display","title":"System Status Display","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nTextView* temp;\nTextView* hum;\nchar buffer[32];\n\nvoid setup() {\n    DisplayManager display(128, 64);\n\n    TextView* title = new TextView(\"System Status\");\n    title-&gt;setPosition(0, 0);\n    title-&gt;setStyle(TextStyle::BOLD);\n\n    temp = new TextView(\"\");\n    temp-&gt;setPosition(0, 16);\n\n    hum = new TextView(\"\");\n    hum-&gt;setPosition(0, 32);\n\n    display.addComponent(title);\n    display.addComponent(temp);\n    display.addComponent(hum);\n    display.begin();\n}\n\nvoid loop() {\n    sprintf(buffer, \"Temperature: %d\u00b0C\", getTemperature());\n    temp-&gt;setText(buffer);\n\n    sprintf(buffer, \"Humidity: %d%%\", getHumidity());\n    hum-&gt;setText(buffer);\n\n    display.update();\n}\n</code></pre>"},{"location":"examples/#settings-menu","title":"Settings Menu","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n\n    Navigation* menu = new Navigation(\"Settings\");\n    menu-&gt;addItem(\"Brightness\", \"50%\");\n    menu-&gt;addItem(\"Contrast\", \"75%\");\n    menu-&gt;addItem(\"Inversion\", \"Off\");\n    menu-&gt;addItem(\"Back\", \"\");\n\n    display.addComponent(menu);\n    display.begin();\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"examples/#alert-system","title":"Alert System","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n\n    Alert* alert = new Alert(\"Warning\", \"Temperature too high!\");\n    alert-&gt;setDuration(3000);\n\n    display.addComponent(alert);\n    display.begin();\n\n    alert-&gt;show();\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"examples/#complete-applications","title":"Complete Applications","text":""},{"location":"examples/#weather-station","title":"Weather Station","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nTextView* temp;\nTextView* hum;\nTextView* press;\nchar buffer[32];\n\nvoid setup() {\n    DisplayManager display(128, 64);\n\n    TextView* title = new TextView(\"Weather Station\");\n    title-&gt;setPosition(0, 0);\n    title-&gt;setStyle(TextStyle::BOLD);\n\n    temp = new TextView(\"\");\n    temp-&gt;setPosition(0, 16);\n\n    hum = new TextView(\"\");\n    hum-&gt;setPosition(0, 32);\n\n    press = new TextView(\"\");\n    press-&gt;setPosition(0, 48);\n\n    display.addComponent(title);\n    display.addComponent(temp);\n    display.addComponent(hum);\n    display.addComponent(press);\n    display.begin();\n}\n\nvoid loop() {\n    sprintf(buffer, \"Temperature: %d\u00b0C\", getTemperature());\n    temp-&gt;setText(buffer);\n\n    sprintf(buffer, \"Humidity: %d%%\", getHumidity());\n    hum-&gt;setText(buffer);\n\n    sprintf(buffer, \"Pressure: %d hPa\", getPressure());\n    press-&gt;setText(buffer);\n\n    display.update();\n}\n</code></pre>"},{"location":"examples/#system-monitor","title":"System Monitor","text":"<p>```cpp</p>"},{"location":"examples/#include","title":"include  <p>void setup() {     DisplayManager display(128, 64);</p> <pre><code>Navigation* menu = new Navigation(\"System Monitor\");\nmenu-&gt;addItem(\"CPU Usage\", \"45%\");\nmenu-&gt;addItem(\"Memory\", \"2.5GB/4GB\");\nmenu-&gt;addItem(\"Network\", \"Connected\");\nmenu-&gt;addItem(\"Storage\", \"75%\");\n\ndisplay.addComponent(menu);\ndisplay.begin();\n</code></pre> <p>}</p> <p>void loop() {     display.update(); } </p>","text":""},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Get started with the EasySSD1306 library.</p>"},{"location":"quickstart/#installation","title":"Installation","text":""},{"location":"quickstart/#platformio","title":"PlatformIO","text":"<p>Add to your <code>platformio.ini</code>:</p> <pre><code>lib_deps =\n    digitalfen/EasySSD1306\n</code></pre>"},{"location":"quickstart/#arduino-ide","title":"Arduino IDE","text":"<ol> <li>Download the ZIP file</li> <li>Go to Sketch &gt; Include Library &gt; Add .ZIP Library</li> <li>Select the downloaded ZIP file</li> </ol>"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    TextView* text = new TextView(\"Hello!\");\n    display.addComponent(text);\n    display.begin();\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"quickstart/#components","title":"Components","text":""},{"location":"quickstart/#text-display","title":"Text Display","text":"<pre><code>TextView* text = new TextView(\"Hello World!\");\ntext-&gt;setPosition(0, 0);\ntext-&gt;setStyle(TextStyle::BOLD);\n</code></pre>"},{"location":"quickstart/#menu-navigation","title":"Menu Navigation","text":"<pre><code>Navigation* menu = new Navigation(\"Main Menu\");\nmenu-&gt;addItem(\"Temperature\", \"25\u00b0C\");\nmenu-&gt;addItem(\"Humidity\", \"60%\");\n</code></pre>"},{"location":"quickstart/#loading-animation","title":"Loading Animation","text":"<pre><code>LoadAnimation* loading = new LoadAnimation(\"Loading...\");\nloading-&gt;setPosition(0, 0);\nloading-&gt;start();\n</code></pre>"},{"location":"quickstart/#alert-messages","title":"Alert Messages","text":"<pre><code>Alert* alert = new Alert(\"Warning\", \"System error detected\");\nalert-&gt;setDuration(3000);\nalert-&gt;show();\n</code></pre>"},{"location":"quickstart/#examples","title":"Examples","text":""},{"location":"quickstart/#status-display","title":"Status Display","text":"<pre><code>void setup() {\n    DisplayManager display(128, 64);\n\n    TextView* title = new TextView(\"System Status\");\n    title-&gt;setPosition(0, 0);\n    title-&gt;setStyle(TextStyle::BOLD);\n\n    TextView* temp = new TextView(\"Temperature: 25\u00b0C\");\n    temp-&gt;setPosition(0, 16);\n\n    TextView* hum = new TextView(\"Humidity: 60%\");\n    hum-&gt;setPosition(0, 32);\n\n    display.addComponent(title);\n    display.addComponent(temp);\n    display.addComponent(hum);\n    display.begin();\n}\n</code></pre>"},{"location":"quickstart/#menu-interface","title":"Menu Interface","text":"<pre><code>void setup() {\n    DisplayManager display(128, 64);\n\n    Navigation* menu = new Navigation(\"Settings\");\n    menu-&gt;addItem(\"Temperature\", \"25\u00b0C\");\n    menu-&gt;addItem(\"Humidity\", \"60%\");\n    menu-&gt;addItem(\"Pressure\", \"1013hPa\");\n\n    display.addComponent(menu);\n    display.begin();\n}\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ol> <li>Check the Components Overview</li> <li>Review the Examples</li> <li>Read the API Reference </li> </ol>"},{"location":"components/alert/","title":"Alert Component","text":"<p>The Alert component displays notifications and alerts.</p>"},{"location":"components/alert/#usage","title":"Usage","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    Alert* alert = new Alert(\"Warning\", \"System error detected\");\n    alert-&gt;setDuration(3000);  // Show for 3 seconds\n    display.addComponent(alert);\n    display.begin();\n}\n</code></pre>"},{"location":"components/alert/#methods","title":"Methods","text":""},{"location":"components/alert/#constructor","title":"Constructor","text":"<pre><code>Alert(const char* title, const char* message)\n</code></pre>"},{"location":"components/alert/#alert-control","title":"Alert Control","text":"<pre><code>void show()\nvoid hide()\nvoid dismiss()\nbool isVisible()\n</code></pre>"},{"location":"components/alert/#content","title":"Content","text":"<pre><code>void setTitle(const char* title)\nvoid setMessage(const char* message)\nconst char* getTitle()\nconst char* getMessage()\n</code></pre>"},{"location":"components/alert/#duration","title":"Duration","text":"<pre><code>void setDuration(unsigned long duration)\nunsigned long getDuration()\n</code></pre>"},{"location":"components/alert/#examples","title":"Examples","text":""},{"location":"components/alert/#simple-alert","title":"Simple Alert","text":"<pre><code>void setup() {\n    DisplayManager display(128, 64);\n\n    Alert* alert = new Alert(\"Success\", \"Operation completed\");\n    alert-&gt;setDuration(2000);\n\n    display.addComponent(alert);\n    display.begin();\n\n    alert-&gt;show();\n}\n</code></pre>"},{"location":"components/alert/#multiple-alerts","title":"Multiple Alerts","text":"<pre><code>void setup() {\n    DisplayManager display(128, 64);\n\n    Alert* error = new Alert(\"Error\", \"Connection failed\");\n    Alert* warning = new Alert(\"Warning\", \"Low battery\");\n\n    display.addComponent(error);\n    display.addComponent(warning);\n    display.begin();\n\n    error-&gt;show();\n    delay(3000);\n    warning-&gt;show();\n}\n</code></pre>"},{"location":"components/display-manager/","title":"DisplayManager","text":"<p>O <code>DisplayManager</code> \u00e9 o componente central da biblioteca EasySSD1306. Ele gerencia todos os componentes visuais e coordena a renderiza\u00e7\u00e3o do display.</p>"},{"location":"components/display-manager/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O <code>DisplayManager</code> \u00e9 respons\u00e1vel por: - Gerenciar o display SSD1306 - Coordenar a renderiza\u00e7\u00e3o de componentes - Controlar a navega\u00e7\u00e3o - Gerenciar estados da interface</p>"},{"location":"components/display-manager/#inicializacao","title":"Inicializa\u00e7\u00e3o","text":"<pre><code>DisplayManager display;\ndisplay.setDisplay(new Adafruit_SSD1306(128, 64));\n</code></pre>"},{"location":"components/display-manager/#configuracao-de-botoes","title":"Configura\u00e7\u00e3o de Bot\u00f5es","text":"<pre><code>display.setButtons(BUTTON_UP_PIN, BUTTON_DOWN_PIN);\n</code></pre>"},{"location":"components/display-manager/#adicionando-componentes","title":"Adicionando Componentes","text":"<pre><code>TextView text(1, \"Texto de exemplo\");\ndisplay.addComponent(&amp;text);\n</code></pre>"},{"location":"components/display-manager/#renderizacao","title":"Renderiza\u00e7\u00e3o","text":"<pre><code>void loop() {\n    display.render();\n    delay(100);\n}\n</code></pre>"},{"location":"components/display-manager/#estados","title":"Estados","text":"<p>O <code>DisplayManager</code> mant\u00e9m controle de dois estados importantes: - <code>currentState</code>: Estado atual da interface - <code>lastState</code>: Estado anterior da interface</p> <p>Para mudar o estado: <pre><code>display.setState(NOVO_ESTADO);\n</code></pre></p>"},{"location":"components/display-manager/#variaveis-estaticas","title":"Vari\u00e1veis Est\u00e1ticas","text":"<ul> <li><code>selectedItem</code>: \u00cdndice do item selecionado</li> <li><code>confirmItem</code>: Flag de confirma\u00e7\u00e3o</li> <li><code>cancelItem</code>: Flag de cancelamento</li> </ul>"},{"location":"components/display-manager/#exemplo-completo","title":"Exemplo Completo","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nDisplayManager display;\nTextView text(1, \"Menu Principal\");\nNavigation menu(2);\n\nvoid setup() {\n    display.setDisplay(new Adafruit_SSD1306(128, 64));\n    display.setButtons(2, 3);  // Pinos 2 e 3 para bot\u00f5es\n\n    display.addComponent(&amp;text);\n    display.addComponent(&amp;menu);\n}\n\nvoid loop() {\n    display.render();\n    delay(100);\n}\n</code></pre>"},{"location":"components/display-manager/#referencia-da-api","title":"Refer\u00eancia da API","text":""},{"location":"components/display-manager/#construtores","title":"Construtores","text":"<ul> <li><code>DisplayManager()</code></li> </ul>"},{"location":"components/display-manager/#metodos-publicos","title":"M\u00e9todos P\u00fablicos","text":"<ul> <li><code>void setDisplay(Adafruit_SSD1306 *disp)</code></li> <li><code>void setButtons(uint8_t buttonUp, uint8_t buttonDown)</code></li> <li><code>void addComponent(IDisplayComponent *component)</code></li> <li><code>void render()</code></li> <li><code>void setState(unsigned int n)</code></li> </ul>"},{"location":"components/display-manager/#variaveis-publicas","title":"Vari\u00e1veis P\u00fablicas","text":"<ul> <li><code>unsigned int currentState</code></li> <li><code>unsigned int lastState</code></li> <li><code>static int selectedItem</code></li> <li><code>static bool confirmItem</code></li> <li><code>static bool cancelItem</code></li> </ul>"},{"location":"components/display-manager/#dicas-de-uso","title":"Dicas de Uso","text":"<ol> <li>Inicializa\u00e7\u00e3o</li> <li>Sempre inicialize o display antes de adicionar componentes</li> <li> <p>Configure os bot\u00f5es se for usar navega\u00e7\u00e3o</p> </li> <li> <p>Renderiza\u00e7\u00e3o</p> </li> <li>Chame <code>render()</code> no loop principal</li> <li> <p>Mantenha um delay adequado para evitar flickering</p> </li> <li> <p>Estados</p> </li> <li>Use estados para gerenciar diferentes telas</li> <li> <p>Mantenha controle do estado anterior para navega\u00e7\u00e3o</p> </li> <li> <p>Componentes</p> </li> <li>Adicione componentes na ordem desejada</li> <li>Cada componente deve ter um ID \u00fanico </li> </ol>"},{"location":"components/image-animation/","title":"ImageAnimation Component","text":"<p>The ImageAnimation component creates animated image effects.</p>"},{"location":"components/image-animation/#usage","title":"Usage","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    ImageAnimation* anim = new ImageAnimation(logoBitmap, 32, 32);\n    anim-&gt;setPosition(0, 0);\n    anim-&gt;setSpeed(1);\n    display.addComponent(anim);\n    display.begin();\n}\n</code></pre>"},{"location":"components/image-animation/#methods","title":"Methods","text":""},{"location":"components/image-animation/#constructor","title":"Constructor","text":"<pre><code>ImageAnimation(const uint8_t* bitmap, int width, int height)\n</code></pre>"},{"location":"components/image-animation/#animation-control","title":"Animation Control","text":"<pre><code>void start()\nvoid stop()\nvoid pause()\nvoid resume()\nbool isRunning()\n</code></pre>"},{"location":"components/image-animation/#image","title":"Image","text":"<pre><code>void setImage(const uint8_t* bitmap, int width, int height)\nconst uint8_t* getBitmap()\nint getWidth()\nint getHeight()\n</code></pre>"},{"location":"components/image-animation/#position","title":"Position","text":"<pre><code>void setPosition(int x, int y)\nint getX()\nint getY()\n</code></pre>"},{"location":"components/image-animation/#speed","title":"Speed","text":"<pre><code>void setSpeed(int speed)\nint getSpeed()\n</code></pre>"},{"location":"components/image-animation/#examples","title":"Examples","text":""},{"location":"components/image-animation/#fade-animation","title":"Fade Animation","text":"<pre><code>void setup() {\n    DisplayManager display(128, 64);\n\n    ImageAnimation* logo = new ImageAnimation(logoBitmap, 32, 32);\n    logo-&gt;setPosition(48, 16);  // Center the logo\n    logo-&gt;setSpeed(2);\n\n    TextView* title = new TextView(\"Loading...\");\n    title-&gt;setPosition(0, 48);\n\n    display.addComponent(logo);\n    display.addComponent(title);\n    display.begin();\n\n    logo-&gt;start();\n}\n</code></pre>"},{"location":"components/image-animation/#multiple-animations","title":"Multiple Animations","text":"<pre><code>void setup() {\n    DisplayManager display(128, 64);\n\n    ImageAnimation* icon1 = new ImageAnimation(icon1Bitmap, 16, 16);\n    icon1-&gt;setPosition(0, 0);\n    icon1-&gt;setSpeed(1);\n\n    ImageAnimation* icon2 = new ImageAnimation(icon2Bitmap, 16, 16);\n    icon2-&gt;setPosition(16, 0);\n    icon2-&gt;setSpeed(1);\n\n    display.addComponent(icon1);\n    display.addComponent(icon2);\n    display.begin();\n\n    icon1-&gt;start();\n    icon2-&gt;start();\n}\n</code></pre>"},{"location":"components/image-view/","title":"Image View","text":"<p>The ImageView component displays static images on the OLED display.</p>"},{"location":"components/image-view/#usage","title":"Usage","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n\n    // Create image component\n    ImageView* image = new ImageView(bitmapData, width, height);\n    image-&gt;setPosition(0, 0);\n\n    display.addComponent(image);\n    display.begin();\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"components/image-view/#methods","title":"Methods","text":"<ul> <li><code>setPosition(int x, int y)</code>: Set image position</li> <li><code>setScale(float scale)</code>: Set image scale (default: 1.0)</li> <li><code>setVisible(bool visible)</code>: Show/hide image</li> <li><code>getWidth()</code>: Get image width</li> <li><code>getHeight()</code>: Get image height</li> </ul>"},{"location":"components/image-view/#examples","title":"Examples","text":""},{"location":"components/image-view/#basic-image-display","title":"Basic Image Display","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\n// Image data (1-bit per pixel)\nconst uint8_t logo[] = {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // ... more image data ...\n};\n\nvoid setup() {\n    DisplayManager display(128, 64);\n\n    // Create logo component\n    ImageView* logoImage = new ImageView(logo, 32, 32);\n    logoImage-&gt;setPosition(48, 16);\n\n    display.addComponent(logoImage);\n    display.begin();\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"components/image-view/#scaled-image","title":"Scaled Image","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n\n    // Create scaled image\n    ImageView* image = new ImageView(bitmapData, 16, 16);\n    image-&gt;setPosition(0, 0);\n    image-&gt;setScale(2.0); // Double size\n\n    display.addComponent(image);\n    display.begin();\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"components/load-animation/","title":"LoadAnimation Component","text":"<p>The LoadAnimation component shows loading states and progress indicators.</p>"},{"location":"components/load-animation/#usage","title":"Usage","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    LoadAnimation* loading = new LoadAnimation(\"Loading...\");\n    loading-&gt;setPosition(0, 0);\n    display.addComponent(loading);\n    display.begin();\n}\n</code></pre>"},{"location":"components/load-animation/#methods","title":"Methods","text":""},{"location":"components/load-animation/#constructor","title":"Constructor","text":"<pre><code>LoadAnimation(const char* text)\n</code></pre>"},{"location":"components/load-animation/#animation-control","title":"Animation Control","text":"<pre><code>void start()\nvoid stop()\nbool isRunning()\n</code></pre>"},{"location":"components/load-animation/#text","title":"Text","text":"<pre><code>void setText(const char* text)\nconst char* getText()\n</code></pre>"},{"location":"components/load-animation/#position","title":"Position","text":"<pre><code>void setPosition(int x, int y)\nint getX()\nint getY()\n</code></pre>"},{"location":"components/load-animation/#examples","title":"Examples","text":""},{"location":"components/load-animation/#loading-with-status","title":"Loading with Status","text":"<pre><code>void setup() {\n    DisplayManager display(128, 64);\n\n    LoadAnimation* loading = new LoadAnimation(\"Connecting\");\n    loading-&gt;setPosition(0, 0);\n\n    TextView* status = new TextView(\"Please wait...\");\n    status-&gt;setPosition(0, 32);\n\n    display.addComponent(loading);\n    display.addComponent(status);\n    display.begin();\n\n    loading-&gt;start();\n}\n</code></pre>"},{"location":"components/load-animation/#dynamic-loading-text","title":"Dynamic Loading Text","text":"<pre><code>LoadAnimation* loading;\nchar buffer[32];\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    loading = new LoadAnimation(\"\");\n    loading-&gt;setPosition(0, 0);\n    display.addComponent(loading);\n    display.begin();\n}\n\nvoid loop() {\n    sprintf(buffer, \"Loading data %d%%\", getProgress());\n    loading-&gt;setText(buffer);\n    display.update();\n}\n</code></pre>"},{"location":"components/load-animation/#available-styles","title":"Available Styles","text":""},{"location":"components/load-animation/#spinner","title":"Spinner","text":"<pre><code>LoadAnimation* loading = new LoadAnimation(\"Loading\");\nloading-&gt;setStyle(LOAD_SPINNER);\n</code></pre>"},{"location":"components/load-animation/#progress-bar","title":"Progress Bar","text":"<pre><code>LoadAnimation* loading = new LoadAnimation(\"Progress\");\nloading-&gt;setStyle(LOAD_PROGRESS);\nloading-&gt;setProgress(50);  // 50%\n</code></pre>"},{"location":"components/load-animation/#dots","title":"Dots","text":"<pre><code>LoadAnimation* loading = new LoadAnimation(\"Please wait\");\nloading-&gt;setStyle(LOAD_DOTS);\n</code></pre>"},{"location":"components/load-animation/#configuration","title":"Configuration","text":""},{"location":"components/load-animation/#duration","title":"Duration","text":"<pre><code>LoadAnimation* loading = new LoadAnimation(\"Loading\");\nloading-&gt;setDuration(3000);  // 3 seconds\n</code></pre>"},{"location":"components/load-animation/#speed","title":"Speed","text":"<pre><code>LoadAnimation* loading = new LoadAnimation(\"Loading\");\nloading-&gt;setSpeed(100);  // 100ms per frame\n</code></pre>"},{"location":"components/load-animation/#callback","title":"Callback","text":"<pre><code>void onComplete() {\n    // Called when animation ends\n    Serial.println(\"Loading complete!\");\n}\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    LoadAnimation* loading = new LoadAnimation(\"Loading\");\n    loading-&gt;setOnComplete(onComplete);\n    display.addComponent(loading);\n    display.begin();\n}\n</code></pre>"},{"location":"components/load-animation/#complete-example","title":"Complete Example","text":"<pre><code>void onComplete() {\n    // Update status after loading\n    TextView* status = new TextView(\"Ready!\");\n    display.addComponent(status);\n}\n\nvoid setup() {\n    DisplayManager display(128, 64);\n\n    LoadAnimation* loading = new LoadAnimation(\"Initializing\");\n    loading-&gt;setStyle(LOAD_SPINNER);\n    loading-&gt;setDuration(2000);\n    loading-&gt;setSpeed(50);\n    loading-&gt;setOnComplete(onComplete);\n\n    display.addComponent(loading);\n    display.begin();\n}\n</code></pre>"},{"location":"components/load-animation/#reference-api","title":"Reference API","text":""},{"location":"components/load-animation/#constructors","title":"Constructors","text":"<ul> <li><code>LoadAnimation(unsigned int id, const char *message)</code></li> </ul>"},{"location":"components/load-animation/#public-methods","title":"Public Methods","text":"<ul> <li><code>unsigned int render(Adafruit_SSD1306 *disp)</code></li> <li><code>void setMessage(const char *message)</code></li> <li><code>void setDuration(unsigned long duration)</code></li> <li><code>void setShowProgress(bool show)</code></li> <li><code>void setProgress(int progress)</code></li> <li><code>void setOnComplete(std::function&lt;void()&gt; callback)</code></li> <li><code>void reset()</code></li> </ul>"},{"location":"components/load-animation/#usage-tips","title":"Usage Tips","text":"<ol> <li>Messages</li> <li>Use clear and informative messages</li> <li>Keep texts short</li> <li> <p>Indicate the operation in progress</p> </li> <li> <p>Duration</p> </li> <li>Configure appropriate time</li> <li>Consider the actual operation</li> <li> <p>Avoid too long times</p> </li> <li> <p>Progress</p> </li> <li>Use for long operations</li> <li>Update regularly</li> <li> <p>Provide visual feedback</p> </li> <li> <p>Performance</p> </li> <li>Avoid too frequent updates</li> <li>Use appropriate delays</li> <li>Consider memory usage</li> </ol>"},{"location":"components/load-animation/#practical-examples","title":"Practical Examples","text":""},{"location":"components/load-animation/#simple-loading","title":"Simple Loading","text":"<pre><code>LoadAnimation loading(1, \"Initializing...\");\nloading.setDuration(2000);  // 2 seconds\n</code></pre>"},{"location":"components/load-animation/#loading-with-progress","title":"Loading with Progress","text":"<pre><code>LoadAnimation loading(1, \"Downloading...\");\nloading.setShowProgress(true);\nloading.setProgress(50);  // 50%\n</code></pre>"},{"location":"components/load-animation/#loading-with-callback","title":"Loading with Callback","text":"<pre><code>LoadAnimation loading(1, \"Connecting...\");\nloading.setDuration(3000);\nloading.setOnComplete([]() {\n    display.setState(2);\n});\n</code></pre>"},{"location":"components/load-animation/#usage-patterns","title":"Usage Patterns","text":""},{"location":"components/load-animation/#system-initialization","title":"System Initialization","text":"<pre><code>void showInitialization() {\n    LoadAnimation init(1, \"Starting...\");\n    init.setDuration(2000);\n    init.setOnComplete([]() {\n        display.setState(1);\n    });\n}\n</code></pre>"},{"location":"components/load-animation/#firmware-update","title":"Firmware Update","text":"<pre><code>void showFirmwareUpdate() {\n    LoadAnimation update(1, \"Updating...\");\n    update.setShowProgress(true);\n\n    // Simulate progress\n    for (int i = 0; i &lt;= 100; i += 10) {\n        update.setProgress(i);\n        delay(500);\n    }\n}\n</code></pre>"},{"location":"components/load-animation/#network-connection","title":"Network Connection","text":"<pre><code>void showNetworkConnection() {\n    LoadAnimation conn(1, \"Connecting...\");\n    conn.setDuration(5000);  // 5 seconds\n    conn.setOnComplete([]() {\n        display.setState(3);\n    });\n}\n</code></pre>"},{"location":"components/navigation/","title":"Navigation Component","text":"<p>The Navigation component creates menus and navigation interfaces.</p>"},{"location":"components/navigation/#usage","title":"Usage","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    Navigation* menu = new Navigation(\"Main Menu\");\n    menu-&gt;addItem(\"Temperature\", \"25\u00b0C\");\n    menu-&gt;addItem(\"Humidity\", \"60%\");\n    menu-&gt;addItem(\"Settings\", \"\");\n    display.addComponent(menu);\n    display.begin();\n}\n</code></pre>"},{"location":"components/navigation/#methods","title":"Methods","text":""},{"location":"components/navigation/#constructor","title":"Constructor","text":"<pre><code>Navigation(const char* title)\n</code></pre>"},{"location":"components/navigation/#menu-items","title":"Menu Items","text":"<pre><code>void addItem(const char* label, const char* value)\nvoid removeItem(int index)\nvoid clearItems()\n</code></pre>"},{"location":"components/navigation/#selection","title":"Selection","text":"<pre><code>void selectItem(int index)\nint getSelectedIndex()\nconst char* getSelectedLabel()\nconst char* getSelectedValue()\n</code></pre>"},{"location":"components/navigation/#navigation","title":"Navigation","text":"<pre><code>void nextItem()\nvoid previousItem()\n</code></pre>"},{"location":"components/navigation/#examples","title":"Examples","text":""},{"location":"components/navigation/#hierarchical-menu","title":"Hierarchical Menu","text":"<pre><code>void setup() {\n    DisplayManager display(128, 64);\n\n    Navigation* mainMenu = new Navigation(\"Main Menu\");\n    mainMenu-&gt;addItem(\"Temperature\", \"\");\n    mainMenu-&gt;addItem(\"Humidity\", \"\");\n    mainMenu-&gt;addItem(\"Settings\", \"\");\n\n    Navigation* settingsMenu = new Navigation(\"Settings\");\n    settingsMenu-&gt;addItem(\"Brightness\", \"50%\");\n    settingsMenu-&gt;addItem(\"Contrast\", \"75%\");\n\n    display.addComponent(mainMenu);\n    display.addComponent(settingsMenu);\n    display.begin();\n}\n</code></pre>"},{"location":"components/navigation/#dynamic-menu","title":"Dynamic Menu","text":"<pre><code>Navigation* menu;\nchar buffer[32];\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    menu = new Navigation(\"System Status\");\n    display.addComponent(menu);\n    display.begin();\n}\n\nvoid loop() {\n    menu-&gt;clearItems();\n    sprintf(buffer, \"Temperature: %d\u00b0C\", getTemperature());\n    menu-&gt;addItem(\"Temperature\", buffer);\n    sprintf(buffer, \"Humidity: %d%%\", getHumidity());\n    menu-&gt;addItem(\"Humidity\", buffer);\n    display.update();\n}\n</code></pre>"},{"location":"components/overview/","title":"Components Overview","text":"<p>The EasySSD1306 library provides components for creating interfaces on the SSD1306 OLED display.</p>"},{"location":"components/overview/#component-hierarchy","title":"Component Hierarchy","text":"<ul> <li>DisplayManager</li> <li>TextView</li> <li>TextAnimation</li> <li>Navigation</li> <li>ImageView</li> <li>ImageAnimation</li> <li>LoadAnimation</li> <li>Alert</li> </ul>"},{"location":"components/overview/#basic-usage","title":"Basic Usage","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    TextView* text = new TextView(\"Hello!\");\n    Navigation* menu = new Navigation(\"Menu\");\n    ImageView* logo = new ImageView(logoBitmap, 32, 32);\n\n    display.addComponent(text);\n    display.addComponent(menu);\n    display.addComponent(logo);\n    display.begin();\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"components/overview/#component-types","title":"Component Types","text":""},{"location":"components/overview/#text-components","title":"Text Components","text":"<ul> <li><code>TextView</code>: Display static text</li> <li><code>TextAnimation</code>: Create text animations</li> <li><code>Prompt</code>: Handle user text input</li> </ul>"},{"location":"components/overview/#navigation-components","title":"Navigation Components","text":"<ul> <li><code>Navigation</code>: Create menus and navigation interfaces</li> </ul>"},{"location":"components/overview/#image-components","title":"Image Components","text":"<ul> <li><code>ImageView</code>: Display static images</li> <li><code>ImageAnimation</code>: Create image animations</li> </ul>"},{"location":"components/overview/#feedback-components","title":"Feedback Components","text":"<ul> <li><code>LoadAnimation</code>: Show loading states</li> <li><code>Alert</code>: Display alerts and notifications</li> </ul>"},{"location":"components/overview/#best-practices","title":"Best Practices","text":"<ol> <li>Memory Management</li> <li>Use dynamic allocation for components</li> <li> <p>Free memory when components are no longer needed</p> </li> <li> <p>Performance</p> </li> <li>Minimize component updates</li> <li> <p>Use appropriate update intervals</p> </li> <li> <p>Layout</p> </li> <li>Plan your layout before coding</li> <li> <p>Consider screen resolution limitations</p> </li> <li> <p>Interaction</p> </li> <li>Implement clear navigation patterns</li> <li>Provide visual feedback for user actions </li> </ol>"},{"location":"components/prompt/","title":"Prompt Component","text":"<p>The Prompt component handles user text input.</p>"},{"location":"components/prompt/#usage","title":"Usage","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    Prompt* prompt = new Prompt(\"Enter value:\", \"\");\n    prompt-&gt;setMaxLength(10);\n    display.addComponent(prompt);\n    display.begin();\n}\n</code></pre>"},{"location":"components/prompt/#methods","title":"Methods","text":""},{"location":"components/prompt/#constructor","title":"Constructor","text":"<pre><code>Prompt(const char* label, const char* initialValue)\n</code></pre>"},{"location":"components/prompt/#input-control","title":"Input Control","text":"<pre><code>void start()\nvoid stop()\nvoid clear()\nbool isActive()\n</code></pre>"},{"location":"components/prompt/#content","title":"Content","text":"<pre><code>void setLabel(const char* label)\nvoid setValue(const char* value)\nconst char* getLabel()\nconst char* getValue()\n</code></pre>"},{"location":"components/prompt/#input-settings","title":"Input Settings","text":"<pre><code>void setMaxLength(int length)\nint getMaxLength()\nvoid setInputType(InputType type)\nInputType getInputType()\n</code></pre>"},{"location":"components/prompt/#examples","title":"Examples","text":""},{"location":"components/prompt/#text-input","title":"Text Input","text":"<pre><code>void setup() {\n    DisplayManager display(128, 64);\n\n    Prompt* prompt = new Prompt(\"Enter name:\", \"\");\n    prompt-&gt;setMaxLength(20);\n    prompt-&gt;setInputType(InputType::TEXT);\n\n    display.addComponent(prompt);\n    display.begin();\n\n    prompt-&gt;start();\n}\n</code></pre>"},{"location":"components/prompt/#numeric-input","title":"Numeric Input","text":"<pre><code>void setup() {\n    DisplayManager display(128, 64);\n\n    Prompt* prompt = new Prompt(\"Enter number:\", \"\");\n    prompt-&gt;setMaxLength(5);\n    prompt-&gt;setInputType(InputType::NUMBER);\n\n    display.addComponent(prompt);\n    display.begin();\n\n    prompt-&gt;start();\n}\n</code></pre>"},{"location":"components/text-animation/","title":"TextAnimation Component","text":"<p>The TextAnimation component creates animated text effects.</p>"},{"location":"components/text-animation/#usage","title":"Usage","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    TextAnimation* text = new TextAnimation(\"Scrolling Text\");\n    text-&gt;setPosition(0, 0);\n    text-&gt;setSpeed(1);\n    display.addComponent(text);\n    display.begin();\n}\n</code></pre>"},{"location":"components/text-animation/#methods","title":"Methods","text":""},{"location":"components/text-animation/#constructor","title":"Constructor","text":"<pre><code>TextAnimation(const char* text)\n</code></pre>"},{"location":"components/text-animation/#animation-control","title":"Animation Control","text":"<pre><code>void start()\nvoid stop()\nvoid pause()\nvoid resume()\nbool isRunning()\n</code></pre>"},{"location":"components/text-animation/#text","title":"Text","text":"<pre><code>void setText(const char* text)\nconst char* getText()\n</code></pre>"},{"location":"components/text-animation/#position","title":"Position","text":"<pre><code>void setPosition(int x, int y)\nint getX()\nint getY()\n</code></pre>"},{"location":"components/text-animation/#speed","title":"Speed","text":"<pre><code>void setSpeed(int speed)\nint getSpeed()\n</code></pre>"},{"location":"components/text-animation/#examples","title":"Examples","text":""},{"location":"components/text-animation/#scrolling-text","title":"Scrolling Text","text":"<pre><code>void setup() {\n    DisplayManager display(128, 64);\n\n    TextAnimation* scroll = new TextAnimation(\"This is a scrolling text message\");\n    scroll-&gt;setPosition(0, 0);\n    scroll-&gt;setSpeed(2);\n\n    display.addComponent(scroll);\n    display.begin();\n\n    scroll-&gt;start();\n}\n</code></pre>"},{"location":"components/text-animation/#multiple-animations","title":"Multiple Animations","text":"<p>```cpp void setup() {     DisplayManager display(128, 64);</p> <pre><code>TextAnimation* title = new TextAnimation(\"Welcome\");\ntitle-&gt;setPosition(0, 0);\ntitle-&gt;setSpeed(1);\n\nTextAnimation* message = new TextAnimation(\"Please wait...\");\nmessage-&gt;setPosition(0, 32);\nmessage-&gt;setSpeed(1);\n\ndisplay.addComponent(title);\ndisplay.addComponent(message);\ndisplay.begin();\n\ntitle-&gt;start();\nmessage-&gt;start();\n</code></pre> <p>} </p>"},{"location":"components/text-view/","title":"TextView Component","text":"<p>The TextView component displays static text on the OLED display.</p>"},{"location":"components/text-view/#usage","title":"Usage","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    TextView* text = new TextView(\"Hello World!\");\n    text-&gt;setPosition(0, 0);\n    text-&gt;setStyle(TextStyle::NORMAL);\n    display.addComponent(text);\n    display.begin();\n}\n</code></pre>"},{"location":"components/text-view/#available-styles","title":"Available Styles","text":"<ul> <li><code>NORMAL</code>: Standard text style</li> <li><code>BOLD</code>: Bold text style</li> <li><code>ITALIC</code>: Italic text style</li> <li><code>UNDERLINE</code>: Underlined text style</li> </ul>"},{"location":"components/text-view/#methods","title":"Methods","text":""},{"location":"components/text-view/#constructor","title":"Constructor","text":"<pre><code>TextView(const char* text)\n</code></pre>"},{"location":"components/text-view/#text-manipulation","title":"Text Manipulation","text":"<pre><code>void setText(const char* text)\nconst char* getText()\n</code></pre>"},{"location":"components/text-view/#position","title":"Position","text":"<pre><code>void setPosition(int x, int y)\nint getX()\nint getY()\n</code></pre>"},{"location":"components/text-view/#style","title":"Style","text":"<pre><code>void setStyle(TextStyle style)\nTextStyle getStyle()\n</code></pre>"},{"location":"components/text-view/#visibility","title":"Visibility","text":"<pre><code>void setVisible(bool visible)\nbool isVisible()\n</code></pre>"},{"location":"components/text-view/#examples","title":"Examples","text":""},{"location":"components/text-view/#multiple-text-views","title":"Multiple Text Views","text":"<pre><code>void setup() {\n    DisplayManager display(128, 64);\n\n    TextView* title = new TextView(\"System Status\");\n    title-&gt;setPosition(0, 0);\n    title-&gt;setStyle(TextStyle::BOLD);\n\n    TextView* status = new TextView(\"Running\");\n    status-&gt;setPosition(0, 16);\n    status-&gt;setStyle(TextStyle::NORMAL);\n\n    display.addComponent(title);\n    display.addComponent(status);\n    display.begin();\n}\n</code></pre>"},{"location":"components/text-view/#dynamic-text-update","title":"Dynamic Text Update","text":"<pre><code>TextView* status;\nchar buffer[32];\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    status = new TextView(\"\");\n    status-&gt;setPosition(0, 0);\n    display.addComponent(status);\n    display.begin();\n}\n\nvoid loop() {\n    sprintf(buffer, \"Temperature: %d\u00b0C\", getTemperature());\n    status-&gt;setText(buffer);\n    display.update();\n}\n</code></pre>"},{"location":"examples/advanced/","title":"Advanced Examples","text":""},{"location":"examples/advanced/#custom-animation","title":"Custom Animation","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nclass CustomAnimation : public TextAnimation {\npublic:\n    CustomAnimation(const char* text) : TextAnimation(text) {}\n\n    void update() override {\n        // Bounce text left and right\n        static int direction = 1;\n        static int x = 0;\n\n        x += direction;\n        if (x &gt;= 32 || x &lt;= 0) {\n            direction *= -1;\n        }\n\n        setPosition(x, getY());\n    }\n};\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    display.begin();\n\n    CustomAnimation* animation = new CustomAnimation(\"Bouncing!\");\n    animation-&gt;setPosition(0, 32);\n    display.addComponent(animation);\n}\n\nvoid loop() {\n    display.update();\n    delay(50);  // Control animation speed\n}\n</code></pre>"},{"location":"examples/advanced/#interactive-menu-system","title":"Interactive Menu System","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\n// Menu callback function type\ntypedef void (*MenuCallback)();\n\n// Menu item structure\nstruct MenuItem {\n    const char* name;\n    MenuCallback callback;\n};\n\nvoid option1() { /* Handle option 1 */ }\nvoid option2() { /* Handle option 2 */ }\nvoid option3() { /* Handle option 3 */ }\n\n// Menu items\nMenuItem menuItems[] = {\n    {\"Option 1\", option1},\n    {\"Option 2\", option2},\n    {\"Option 3\", option3}\n};\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    display.begin();\n\n    Navigation* menu = new Navigation();\n    for (const auto&amp; item : menuItems) {\n        menu-&gt;addItem(item.name);\n    }\n    menu-&gt;setPosition(0, 0);\n    display.addComponent(menu);\n\n    // Add selection indicator\n    TextView* indicator = new TextView(\"&gt;\");\n    indicator-&gt;setPosition(0, menu-&gt;getSelectedIndex() * 8);\n    display.addComponent(indicator);\n}\n\nvoid loop() {\n    // Handle button inputs\n    if (digitalRead(SELECT_PIN) == HIGH) {\n        menuItems[menu-&gt;getSelectedIndex()].callback();\n    }\n\n    display.update();\n}\n</code></pre>"},{"location":"examples/advanced/#multi-screen-interface","title":"Multi-Screen Interface","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nclass Screen {\npublic:\n    virtual void show(DisplayManager&amp; display) = 0;\n    virtual void hide(DisplayManager&amp; display) = 0;\n};\n\nclass MainScreen : public Screen {\n    TextView* title;\n    Navigation* menu;\npublic:\n    MainScreen() {\n        title = new TextView(\"Main Menu\");\n        title-&gt;setPosition(0, 0);\n\n        menu = new Navigation();\n        menu-&gt;addItem(\"Settings\");\n        menu-&gt;addItem(\"Status\");\n        menu-&gt;setPosition(0, 16);\n    }\n\n    void show(DisplayManager&amp; display) override {\n        display.addComponent(title);\n        display.addComponent(menu);\n    }\n\n    void hide(DisplayManager&amp; display) override {\n        display.removeComponent(title);\n        display.removeComponent(menu);\n    }\n};\n\nclass SettingsScreen : public Screen {\n    // Similar implementation\n};\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    display.begin();\n\n    MainScreen* mainScreen = new MainScreen();\n    mainScreen-&gt;show(display);\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"examples/advanced/#status-dashboard","title":"Status Dashboard","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    display.begin();\n\n    // Title\n    TextView* title = new TextView(\"System Status\");\n    title-&gt;setPosition(0, 0);\n    display.addComponent(title);\n\n    // CPU Usage Bar\n    LoadAnimation* cpuBar = new LoadAnimation();\n    cpuBar-&gt;setPosition(0, 16);\n    display.addComponent(cpuBar);\n\n    // Memory Usage\n    TextView* memLabel = new TextView(\"MEM:\");\n    memLabel-&gt;setPosition(0, 32);\n    display.addComponent(memLabel);\n\n    TextView* memValue = new TextView(\"75%\");\n    memValue-&gt;setPosition(48, 32);\n    display.addComponent(memValue);\n\n    // Temperature\n    TextView* tempLabel = new TextView(\"TEMP:\");\n    tempLabel-&gt;setPosition(0, 48);\n    display.addComponent(tempLabel);\n\n    TextView* tempValue = new TextView(\"28C\");\n    tempValue-&gt;setPosition(48, 48);\n    display.addComponent(tempValue);\n}\n\nvoid loop() {\n    // Update values periodically\n    updateSystemStats();\n    display.update();\n    delay(1000);\n}\n</code></pre>"},{"location":"examples/basic/","title":"Basic Examples","text":""},{"location":"examples/basic/#simple-text-display","title":"Simple Text Display","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    // Initialize display with default I2C pins\n    DisplayManager display(128, 64);  // 128x64 OLED display\n    display.begin();\n\n    // Create and add a text component\n    TextView* text = new TextView(\"Hello, World!\");\n    text-&gt;setPosition(0, 0);  // Position at top-left\n    display.addComponent(text);\n}\n\nvoid loop() {\n    display.update();  // Update display contents\n}\n</code></pre>"},{"location":"examples/basic/#multiple-components","title":"Multiple Components","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    display.begin();\n\n    // Add a title\n    TextView* title = new TextView(\"Status\");\n    title-&gt;setPosition(0, 0);\n    display.addComponent(title);\n\n    // Add a loading animation\n    LoadAnimation* loading = new LoadAnimation();\n    loading-&gt;setPosition(0, 20);\n    display.addComponent(loading);\n\n    // Add a status message\n    TextView* status = new TextView(\"Processing...\");\n    status-&gt;setPosition(0, 40);\n    display.addComponent(status);\n}\n\nvoid loop() {\n    display.update();\n}\n</code></pre>"},{"location":"examples/basic/#navigation-menu","title":"Navigation Menu","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    display.begin();\n\n    // Create a navigation menu\n    Navigation* menu = new Navigation();\n    menu-&gt;addItem(\"Settings\");\n    menu-&gt;addItem(\"Info\");\n    menu-&gt;addItem(\"About\");\n    menu-&gt;setPosition(0, 0);\n    display.addComponent(menu);\n}\n\nvoid loop() {\n    // Handle button inputs (example using GPIO pins)\n    if (digitalRead(UP_PIN) == HIGH) {\n        menu-&gt;previous();\n    }\n    if (digitalRead(DOWN_PIN) == HIGH) {\n        menu-&gt;next();\n    }\n\n    display.update();\n}\n</code></pre>"},{"location":"examples/basic/#alert-dialog","title":"Alert Dialog","text":"<pre><code>#include &lt;EasySSD1306.h&gt;\n\nvoid setup() {\n    DisplayManager display(128, 64);\n    display.begin();\n\n    // Create an alert\n    Alert* alert = new Alert(\"Warning\", \"Battery Low!\");\n    alert-&gt;setPosition(16, 16);  // Center on screen\n    display.addComponent(alert);\n}\n\nvoid loop() {\n    // Show alert for 3 seconds\n    display.update();\n    delay(3000);\n    alert-&gt;setVisible(false);\n    display.update();\n}\n</code></pre>"},{"location":"examples/basic/#image-display","title":"Image Display","text":"<p>```cpp</p>"},{"location":"examples/basic/#include","title":"include  <p>// Define a small 16x16 bitmap const uint8_t ICON[] PROGMEM = {     0x00, 0x00, 0x3E, 0x7C, 0x7E, 0xFE, 0x7E, 0xFE,     0x7E, 0xFE, 0x7E, 0xFE, 0x7E, 0xFE, 0x3E, 0x7C,     0x3E, 0x7C, 0x7E, 0xFE, 0x7E, 0xFE, 0x7E, 0xFE,     0x7E, 0xFE, 0x7E, 0xFE, 0x3E, 0x7C, 0x00, 0x00 };</p> <p>void setup() {     DisplayManager display(128, 64);     display.begin();</p> <pre><code>// Create and add an image component\nImageView* image = new ImageView(ICON, 16, 16);\nimage-&gt;setPosition(56, 24);  // Center of screen\ndisplay.addComponent(image);\n</code></pre> <p>}</p> <p>void loop() {     display.update(); } </p>","text":""}]}